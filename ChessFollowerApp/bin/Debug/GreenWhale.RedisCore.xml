<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GreenWhale.RedisCore</name>
    </assembly>
    <members>
        <member name="M:GreenWhale.RedisCore.Internal.IO.IRedisSocket.Connect(System.Net.EndPoint,System.Int32)">
            <summary>
            </summary>
            <param name="endpoint"></param>
            <param name="timeout">
            The number of milliseconds to wait connect. The default value is 0, 
            which indicates an infinite time-out period. Specifying 
            Timeout.Infinite (-1) also indicates an infinite time-out period.
            </param>
        </member>
        <member name="M:GreenWhale.RedisCore.Internal.Utilities.RedisArgs.Concat(System.Object[][])">
            <summary>
            Join arrays
            </summary>
            <param name="arrays">Arrays to join</param>
            <returns>Array of ToString() elements in each array</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Internal.Utilities.RedisArgs.Concat(System.String,System.Object[])">
            <summary>
            Joine string with arrays
            </summary>
            <param name="str">Leading string element</param>
            <param name="arrays">Array to join</param>
            <returns>Array of str and ToString() elements of arrays</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Internal.Utilities.RedisArgs.GetTupleArgs``2(System.Tuple{``0,``1}[])">
            <summary>
            Convert array of two-element tuple into flat array arguments
            </summary>
            <typeparam name="TItem1">Type of first item</typeparam>
            <typeparam name="TItem2">Type of second item</typeparam>
            <param name="tuples">Array of tuple arguments</param>
            <returns>Flattened array of arguments</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Internal.Utilities.RedisArgs.GetScore(System.Double,System.Boolean)">
            <summary>
            Parse score for +/- infinity and inclusive/exclusive
            </summary>
            <param name="score">Numeric base score</param>
            <param name="isExclusive">Score is exclusive, rather than inclusive</param>
            <returns>String representing Redis score/range notation</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Dispose">
            <summary>
            提交批命令
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.EndPipe">
            <summary>
            提交批命令
            </summary>
            <returns></returns>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Counter">
            <summary>
            执行命令数量
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PfCount(System.String)">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZAdd(System.String,System.ValueTuple{System.Double,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZCount(System.String,System.Double,System.Double)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZIncrBy(System.String,System.String,System.Double)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="memeber">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZInterStore(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScore(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScore``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScoreWithScores``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRemRangeByScore(System.String,System.Double,System.Double)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScore(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScore``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScoreWithScores``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZUnionStore(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LInsertBefore(System.String,System.String,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LInsertAfter(System.String,System.String,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HValues(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HValues``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.BitOp(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.IncrBy(System.String,System.Double)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Set(System.String,System.Object,System.Int32,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Del(System.String)">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.CSRedisClientPipe`1.Scan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSubscriptionReceivedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription message is received
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionReceivedEventArgs.Message">
            <summary>
            The subscription message
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSubscriptionChangedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription channel is opened or closed
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionChangedEventArgs.Response">
            <summary>
            The subscription response
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisTransactionQueuedEventArgs">
            <summary>
            Provides data for the event that is raised when a transaction command has been processed by the server
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisTransactionQueuedEventArgs.Status">
            <summary>
            The status code of the transaction command
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisTransactionQueuedEventArgs.Command">
            <summary>
            The command that was queued
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisTransactionQueuedEventArgs.Arguments">
            <summary>
            The arguments of the queued command
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisMonitorEventArgs">
            <summary>
            Provides data for the event that is raised when a Redis MONITOR message is received
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMonitorEventArgs.Message">
            <summary>
            Monitor output
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisException">
            <summary>
            Represents a Redis server error reply
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisException class
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisProtocolException">
            <summary>
            The exception that is thrown when an unexpected value is found in a Redis request or response 
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisProtocolException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisProtocolException class
            </summary>
            <param name="message">Protocol violoation message</param>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisClientException">
            <summary>
            Exception thrown by RedisClient
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisClientException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisClientException class
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisClientException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiate a new instance of the RedisClientException class
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.IRedisClient">
            <summary>
            Common properties of the RedisClient
            </summary>
        </member>
        <member name="E:GreenWhale.RedisCore.Model.IRedisClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:GreenWhale.RedisCore.Model.IRedisClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:GreenWhale.RedisCore.Model.IRedisClient.TransactionQueued">
            <summary>
            Occurs when a transaction command is acknowledged by the server
            </summary>
        </member>
        <member name="E:GreenWhale.RedisCore.Model.IRedisClient.MonitorReceived">
            <summary>
            Occurs when a monitor message is received
            </summary>
        </member>
        <member name="E:GreenWhale.RedisCore.Model.IRedisClient.Connected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.Host">
            <summary>
            Get the Redis server hostname
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.Port">
            <summary>
            Get the Redis server port
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.IsConnected">
            <summary>
            Get a value indicating whether the Redis client is connected to the server
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.Encoding">
            <summary>
            Get or set the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.IRedisClient.ReconnectWait">
            <summary>
            Get or set the amount of time (milliseconds) to wait between reconnect attempts
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.IRedisClientAsync">
            <summary>
            Interface for asyncronous RedisClient methods
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ConnectAsync">
            <summary>
            Open connection to redis server
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary redis command
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.AuthAsync(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.EchoAsync(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PingAsync">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.QuitAsync">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SelectAsync(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DelAsync(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DumpAsync(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ExistsAsync(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ExpireAsync(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second);
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ExpireAtAsync(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.KeysAsync(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MoveAsync(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ObjectEncodingAsync(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ObjectAsync(GreenWhale.RedisCore.Model.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PersistAsync(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PExpireAsync(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond);
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PExpireAtAsync(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PTtlAsync(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RandomKeyAsync">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RenameAsync(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RenameNxAsync(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SortAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.TtlAsync(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.TypeAsync(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HDelAsync(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HExistsAsync(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HGetAsync(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HGetAllAsync``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HGetAllAsync(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HIncrByFloatAsync(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HKeysAsync(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HLenAsync(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HMGetAsync(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HMSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HMSetAsync``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HMSetAsync(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HValsAsync(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LIndexAsync(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LInsertAsync(System.String,GreenWhale.RedisCore.Model.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LLenAsync(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LPopAsync(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LPushAsync(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LPushXAsync(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RPopAsync(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RPopLPushAsync(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RPushAsync(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RPushXAsync(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SCardAsync(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SDiffAsync(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SInterAsync(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SIsMemberAsync(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SMembersAsync(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SPopAsync(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SRandMemberAsync(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SRandMembersAsync(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SUnionAsync(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZAddAsync``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZCardAsync(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZCountAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZIncrByAsync(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZInterStoreAsync(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRevRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZScoreAsync(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZUnionStoreAsync(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PublishAsync(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PubSubChannelsAsync(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Glob-style channel pattern</param>
            <returns>Active channel names</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PubSubNumSubAsync(System.String[])">
            <summary>
            Return the number of subscribers (not counting clients subscribed to patterns) for the specified channels
            </summary>
            <param name="channels">Channels to query</param>
            <returns>Channel names and counts</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PubSubNumPatAsync">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>The number of patterns all the clients are subscribed to</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.EvalAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.EvalSHAAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ScriptExistsAsync(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ScriptFlushAsync">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ScriptKillAsync">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ScriptLoadAsync(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.AppendAsync(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.BitCountAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.BitOpAsync(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DecrAsync(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DecrByAsync(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.GetAsync(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.GetBitAsync(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.GetSetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.IncrAsync(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.IncrByAsync(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.IncrByFloatAsync(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MGetAsync(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MSetAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MSetAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MSetNxAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MSetNxAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PSetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetAsync(System.String,System.Object,System.TimeSpan,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetAsync(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetNxAsync(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.StrLenAsync(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.BgRewriteAofAsync">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.BgSaveAsync">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientGetNameAsync">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientKillAsync(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientKillAsync(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">Client address</param>
            <param name="id">Client ID</param>
            <param name="type">Client type</param>
            <param name="skipMe">Set to true to skip calling client</param>
            <returns>The number of clients killed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientListAsync">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientPauseAsync(System.Int32)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="milliseconds">Time in milliseconds to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientPauseAsync(System.TimeSpan)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="timeout">Time to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ClientSetNameAsync(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ConfigGetAsync(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ConfigResetStatAsync">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ConfigRewriteAsync">
            <summary>
            Rewrites the redis.conf file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ConfigSetAsync(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DbSizeAsync">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DebugSegFaultAsync">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.FlushAllAsync">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.FlushDbAsync">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.InfoAsync(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.LastSaveAsync">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.RoleAsync">
            <summary>
            Provide information on the role of a Redis instance in the context of replication
            </summary>
            <returns>Role information</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SaveAsync">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ShutdownAsync(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SlaveOfNoOneAsync">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SlowLogLenAsync">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SlowLogResetAsync">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.SyncAsync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.TimeAsync">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.MultiAsync">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.DiscardAsync">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.ExecAsync">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.UnwatchAsync">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.WatchAsync(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PfAddAsync(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PfCountAsync(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s);
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientAsync.PfMergeAsync(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.IRedisClientSync">
            <summary>
            Interface for syncronous RedisClient methods
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command
            </summary>
            <param name="command">Command name</param>
            <param name="args">Command arguments</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Select(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second);</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second);
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Object(GreenWhale.RedisCore.Model.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond);</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond);
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds);</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HMSet(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LInsert(System.String,GreenWhale.RedisCore.Model.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.RPushX(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SPop(System.String)">
            <summary>
            Remove and
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SRandMembers(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZCount(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZCount(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZIncrBy(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZInterStore(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <param name="withScores">Include scores in result</param>
             <returns>Array of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRangeWithScores(System.String,System.Int64,System.Int64)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRemRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <param name="withScores">Include scores in result</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRevRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZScore(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZUnionStore(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ZLexCount(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PubSubChannels(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Return only channels matching this pattern</param>
            <returns>Array of channel names</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PubSubNumSub(System.String[])">
             <summary>
            
             </summary>
             <param name="channels">Channel names</param>
             <returns>Array of channel/count tuples</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PubSubNumPat">
             <summary>
            
             </summary>
             <returns>Number of patterns all clients are subscribed to</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Eval(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.EvalSHA(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BitOp(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0);</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.IncrByFloat(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.MSet(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.MSet(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.MSetNx(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.MSetNx(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Set(System.String,System.Object,System.TimeSpan,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off);</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientKill(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">client's ip:port</param>
            <param name="id">client's unique ID</param>
            <param name="type">client type (normal|slave|pubsub);</param>
            <param name="skipMe">do not kill the calling client</param>
            <returns>Nummber of clients killed</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientPause(System.Int32)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="milliseconds">Time to pause in milliseconds</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientPause(System.TimeSpan)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="timeout">Time to pause</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces);</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ConfigRewrite">
            <summary>
            Rewrite the redis.conf file the server was started with, applying the minimal changes needed to make it reflect current configuration
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.DbSize">
             <summary>
            
             </summary>
             <returns>Number of keys</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Role">
            <summary>
            Get role information for the current Redis instance
            </summary>
            <returns>RedisMasterRole|RedisSlaveRole|RedisSentinelRole</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SlowLogLen">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.SlowLogReset">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Time">
             <summary>
            
             </summary>
             <returns>Server time</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PfAdd(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PfCount(System.String[])">
             <summary>
            
             </summary>
             <param name="keys">One or more HyperLogLog keys to examine</param>
             <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.IRedisClientSync.PfMerge(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisConnectionPool">
            <summary>
            Represents a pooled collection of Redis connections
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new connection pool
            </summary>
            <param name="host">Redis server host</param>
            <param name="port">Redis server port</param>
            <param name="max">Maximum simultaneous connections</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.#ctor(System.Net.EndPoint,System.Int32)">
            <summary>
            Create a new connection pool
            </summary>
            <param name="endPoint">Redis server</param>
            <param name="max">Maximum simultaneous connections</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.GetClient(System.Int32,System.Int32)">
            <summary>
            Get a pooled Redis Client instance
            </summary>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
            <returns>RedisClient instance from pool</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.GetClient">
            <summary>
            Get a pooled Redis Client instance
            </summary>
            <returns>RedisClient instance from pool</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.GetSentinelClient(System.Int32,System.Int32)">
            <summary>
            Get a pooled Sentinel Client instance
            </summary>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
            <returns>Sentinel Client from pool</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.GetSentinelClient">
            <summary>
            Get a pooled Sentinel Client instance
            </summary>
            <returns>Sentinel Client from pool</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisConnectionPool.Dispose">
            <summary>
            Close all open pooled connections
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSentinelManager">
            <summary>
            Represents a managed connection to a Redis master instance via a set of Redis sentinel nodes
            </summary>
        </member>
        <member name="E:GreenWhale.RedisCore.Model.RedisSentinelManager.Connected">
            <summary>
            Occurs when the master connection has sucessfully connected
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelManager.#ctor(System.String[])">
            <summary>
            Create a new RedisSentinenlManager
            </summary>
            <param name="sentinels">Sentinel addresses (host:ip)</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelManager.Add(System.String)">
            <summary>
            Add a new sentinel host using default port
            </summary>
            <param name="host">Sentinel hostname</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelManager.Add(System.String,System.Int32)">
            <summary>
            Add a new sentinel host
            </summary>
            <param name="host">Sentinel hostname</param>
            <param name="port">Sentinel port</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelManager.Connect(System.String,System.Int32)">
            <summary>
            Obtain connection to the specified master node
            </summary>
            <param name="masterName">Name of Redis master</param>
            <param name="timeout">Connection timeout (milliseconds)</param>
            <returns>host:port of Sentinel server that responded</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelManager.Call``1(System.Func{CSRedis.RedisClient,``0})">
            <summary>
            Execute command against the master, reconnecting if necessary
            </summary>
            <typeparam name="T">Command return type</typeparam>
            <param name="redisAction">Command to execute</param>
            <returns>Command result</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelManager.Dispose">
            <summary>
            Release resources held by the current RedisSentinelManager
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisObjectSubCommand">
            <summary>
            Sub-command used by Redis OBJECT command
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisObjectSubCommand.RefCount">
            <summary>
            Return the number of references of the value associated with the specified key
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisObjectSubCommand.IdleTime">
            <summary>
            Return the number of seconds since the object stored at the specified key is idle
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSortDir">
            <summary>
            Sort direction used by Redis SORT command
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSortDir.Asc">
            <summary>
            Sort ascending (a-z)
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSortDir.Desc">
            <summary>
            Sort descending (z-a)
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisInsert">
            <summary>
            Insert position used by Redis LINSERT command
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisInsert.Before">
            <summary>
            Insert before pivot element
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisInsert.After">
            <summary>
            Insert after pivot element
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisBitOp">
            <summary>
            Operation used by Redis BITOP command
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisBitOp.And">
            <summary>
            Bitwise AND
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisBitOp.Or">
            <summary>
            Bitwise OR
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisBitOp.XOr">
            <summary>
            Bitwise EXCLUSIVE-OR
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisBitOp.Not">
            <summary>
            Bitwise NOT
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisAggregate">
            <summary>
            Aggregation function used by Reids set operations
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisAggregate.Sum">
            <summary>
            Aggregate SUM
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisAggregate.Min">
            <summary>
            Aggregate MIN
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisAggregate.Max">
            <summary>
            Aggregate MAX
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisMessage">
            <summary>
            Redis unified message prefix
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisMessage.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisMessage.Status">
            <summary>
            Status message
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisMessage.Bulk">
            <summary>
            Bulk message
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisMessage.MultiBulk">
            <summary>
            Multi bulk message
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisMessage.Int">
            <summary>
            Int message
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType">
            <summary>
            Redis subscription response type
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType.Subscribe">
            <summary>
            Channel subscribed
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType.Message">
            <summary>
            Message published
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType.Unsubscribe">
            <summary>
            Channel unsubscribed
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType.PSubscribe">
            <summary>
            Channel pattern subscribed
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType.PMessage">
            <summary>
            Message published to channel pattern
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisSubscriptionResponseType.PUnsubscribe">
            <summary>
            Channel pattern unsubsribed
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisExistence">
            <summary>
            Redis existence specification for SET command
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisExistence.Nx">
            <summary>
            Only set the key if it does not already exist
            </summary>
        </member>
        <member name="F:GreenWhale.RedisCore.Model.RedisExistence.Xx">
            <summary>
            Only set the key if it already exists
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisRole">
            <summary>
            Base class for Redis role information
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisRole.RoleName">
            <summary>
            Get the role type
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisMasterRole">
            <summary>
            Represents information on the Redis master role
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterRole.ReplicationOffset">
            <summary>
            Get the master replication offset
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterRole.Slaves">
            <summary>
            Get the slaves associated with the current master
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSlaveRole">
            <summary>
            Represents information on the Redis slave role
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveRole.MasterIp">
            <summary>
            Get the IP address of the master node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveRole.MasterPort">
            <summary>
            Get the port of the master node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveRole.ReplicationState">
            <summary>
            Get the replication state
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveRole.DataReceived">
            <summary>
            Get the number of bytes received
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSentinelRole">
            <summary>
            Represents information on the Redis sentinel role
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSentinelRole.Masters">
            <summary>
            Get the masters known to the current Sentinel
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisScan`1">
            <summary>
            Represents the result of a Redis SCAN or SSCAN operation
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisScan`1.Cursor">
            <summary>
            Updated cursor that should be used as the cursor argument in the next call
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisScan`1.Items">
            <summary>
            Collection of elements returned by the SCAN operation
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSubscriptionResponse">
            <summary>
            Represents a Redis subscription response
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionResponse.Channel">
            <summary>
            Get the subscription channel name
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionResponse.Pattern">
            <summary>
            Get the subscription pattern
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionResponse.Type">
            <summary>
            Get the message type
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSubscriptionChannel">
            <summary>
            Represents a Redis subscription channel
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionChannel.Count">
            <summary>
            Get the count of active subscriptions
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSubscriptionMessage">
            <summary>
            Represents a Redis subscription message
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSubscriptionMessage.Body">
            <summary>
            Get the subscription message
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisServerInfo">
            <summary>
            Base class for Redis server-info objects reported by Sentinel
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisServerInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisServerInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.Name">
            <summary>
            Get or set Redis server name
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.Ip">
            <summary>
            Get or set Redis server IP
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.Port">
            <summary>
            Get or set Redis server port
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.RunId">
            <summary>
            Get or set Redis server run ID
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.Flags">
            <summary>
            Get or set Redis server flags
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.PendingCommands">
            <summary>
            Get or set number of pending Redis server commands
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.LastPingSent">
            <summary>
            Get or set last ping sent
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.LastOkPingReply">
            <summary>
            Get or set milliseconds since last successful ping reply
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.LastPingReply">
            <summary>
            Get or set milliseconds since last ping reply
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisServerInfo.DownAfterMilliseconds">
            <summary>
            Get or set down after milliseconds
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisServerInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented
            </summary>
            <param name="info">info</param>
            <param name="context">info</param>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisMasterSlaveInfo">
            <summary>
            Base class for Redis master/slave objects reported by Sentinel
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisMasterSlaveInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisMasterSlaveInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterSlaveInfo.InfoRefresh">
            <summary>
            Get or set info refresh
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterSlaveInfo.RoleReported">
            <summary>
            Get or set role reported
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterSlaveInfo.RoleReportedTime">
            <summary>
            Get or set role reported time
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisMasterInfo">
            <summary>
            Represents a Redis master node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisMasterInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisMasterInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterInfo.ConfigEpoch">
            <summary>
            Get or set the config epoch
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterInfo.NumSlaves">
            <summary>
            Get or set number of slaves of the current master node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterInfo.NumOtherSentinels">
            <summary>
            Get or set number of other Sentinels
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterInfo.Quorum">
            <summary>
            Get or set Sentinel quorum count
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterInfo.FailoverTimeout">
            <summary>
            Get or set the failover timeout
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterInfo.ParallelSyncs">
            <summary>
            Get or set the parallel syncs
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSlaveInfo">
            <summary>
            Represents a Redis slave node as reported by a Redis Setinel
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSlaveInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisSlaveInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveInfo.MasterLinkDownTime">
            <summary>
            Get or set the master link down time
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveInfo.MasterLinkStatus">
            <summary>
            Get or set status of master link
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveInfo.MasterHost">
            <summary>
            Get or set the master host of the current Redis slave node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveInfo.MasterPort">
            <summary>
            Get or set the master port of the current Redis slave node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveInfo.SlavePriority">
            <summary>
            Get or set the priority of the current Redis slave node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlaveInfo.SlaveReplOffset">
            <summary>
            Get or set the slave replication offset
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSentinelInfo">
            <summary>
            Represents a Redis Sentinel node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisSentinelInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:GreenWhale.RedisCore.Model.RedisSentinelInfo.GetSerializationItemValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Get a value from an instance of the SerializationInfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSentinelInfo.SDownTime">
            <summary>
            Get or set the subjective down time
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSentinelInfo.LastHelloMessage">
            <summary>
            Get or set milliseconds(?) since last hello message from current Sentinel node
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSentinelInfo.VotedLeader">
            <summary>
            Get or set the voted-leader value
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSentinelInfo.VotedLeaderEpoch">
            <summary>
            Get or set the voted-leader epoch
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisSlowLogEntry">
            <summary>
            Represents an entry from the Redis slow log
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlowLogEntry.Id">
            <summary>
            Get the entry ID
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlowLogEntry.Date">
            <summary>
            Get the entry date
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlowLogEntry.Latency">
            <summary>
            Get the entry latency
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisSlowLogEntry.Arguments">
            <summary>
            Get the entry arguments
            </summary>
        </member>
        <member name="T:GreenWhale.RedisCore.Model.RedisMasterState">
            <summary>
            Represents state as reported by Sentinel
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterState.DownState">
            <summary>
            Get the master down state
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterState.Leader">
            <summary>
            Get the leader
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.Model.RedisMasterState.VoteEpoch">
            <summary>
            Get the vote epoch
            </summary>
        </member>
        <member name="P:GreenWhale.RedisCore.RedisHelper.Instance">
            <summary>
            CSRedisClient 静态实例，使用前请初始化
            RedisHelper.Initialization(new CSRedis.CSRedisClient("127.0.0.1:6379,pass=123,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍"))
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Initialization(CSRedis.CSRedisClient)">
            <summary>
            初始化csredis静态访问类
            RedisHelper.Initialization(new CSRedis.CSRedisClient(\"127.0.0.1:6379,pass=123,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍\"))
            </summary>
            <param name="csredis"></param>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.CacheShell``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.CacheShell``1(System.String,System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.CacheShell``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.ValueTuple{System.String,``0}[]})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.StartPipe(System.Action{GreenWhale.RedisCore.Model.CSRedisClientPipe{System.String}})">
            <summary>
            创建管道传输
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.StartPipe">
            <summary>
            创建管道传输，打包提交如：RedisHelper.StartPipe().Set("a", "1").HSet("b", "f", "2").EndPipe();
            </summary>
            <returns></returns>
        </member>
        <member name="P:GreenWhale.RedisCore.RedisHelper.NodesServerManager">
            <summary>
            在所有分区节点上，执行服务器命令
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.NodeServerManager(System.String)">
            <summary>
            在指定分区节点上，执行服务器命令
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Echo(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Ping(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptExists(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptFlush">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptKill">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptLoad(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PubSubChannels(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PubSubNumPat">
            <summary>
            查看所有模糊订阅端的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PubSubNumSub(System.String[])">
            <summary>
            查看所有订阅端的数量
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Subscribe(System.ValueTuple{System.String,System.Action{CSRedis.CSRedisClient.SubscribeMessageEventArgs}}[])">
            <summary>
            订阅，根据分区规则返回SubscribeObject，Subscribe(("chan1", msg => Console.WriteLine(msg.Body)), ("chan2", msg => Console.WriteLine(msg.Body)))
            </summary>
            <param name="channels">频道和接收器</param>
            <returns>返回可停止订阅的对象</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PSubscribe(System.String[],System.Action{CSRedis.CSRedisClient.PSubscribePMessageEventArgs})">
            <summary>
            模糊订阅，订阅所有分区节点(同条消息只处理一次），返回SubscribeObject，PSubscribe(new [] { "chan1*", "chan2*" }, msg => Console.WriteLine(msg.Body))
            </summary>
            <param name="channelPatterns">模糊频道</param>
            <param name="pmessage">接收器</param>
            <returns>返回可停止模糊订阅的对象</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SubscribeListBroadcast(System.String,System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端非争抢模式），都可以收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="clientId">订阅端标识，若重复则争抢，若唯一必然收到消息</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SubscribeList(System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZAdd(System.String,System.ValueTuple{System.Double,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZCount(System.String,System.Double,System.Double)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZIncrBy(System.String,System.String,System.Double)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="memeber">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZInterStore(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScore(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScore``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScores``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByScore(System.String,System.Double,System.Double)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScore(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScore``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScores``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZUnionStore(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BLPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BLPop(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BLPop``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BRPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BRPop(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BRPop``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BitOp(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.IncrByFloat(System.String,System.Double)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MGet``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Set(System.String,System.Object,System.Int32,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Scan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoAdd(System.String,System.Double,System.Double,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoAdd(System.String,System.ValueTuple{System.Double,System.Double,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoDist(System.String,System.Object,System.Object,GreenWhale.RedisCore.Model.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoHash(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoPos(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadius(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadius``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusWithDist(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusWithDist``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusWithDistAndCoord(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusWithDistAndCoord``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusByMember(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusByMember``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusByMemberWithDist(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.Lock(System.String,System.Int32)">
            <summary>
            开启分布式锁，若超时返回null
            </summary>
            <param name="name">锁名称</param>
            <param name="timeoutSeconds">超时（秒）</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.CacheShellAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.CacheShellAsync``1(System.String,System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.CacheShellAsync``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.Threading.Tasks.Task{System.ValueTuple{System.String,``0}[]}})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.EchoAsync(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PingAsync(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.EvalAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.EvalSHAAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptExistsAsync(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptFlushAsync">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptKillAsync">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScriptLoadAsync(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PublishAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PublishNoneMessageIdAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PubSubChannelsAsync(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PubSubNumPatAsync">
            <summary>
            查看所有模糊订阅端的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PubSubNumSubAsync(System.String[])">
            <summary>
            查看所有订阅端的数量
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PfAddAsync``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PfCountAsync(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PfMergeAsync(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZAddAsync(System.String,System.ValueTuple{System.Double,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZCardAsync(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZCountAsync(System.String,System.Double,System.Double)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZIncrByAsync(System.String,System.String,System.Double)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="memeber">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZInterStoreAsync(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScoresAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemAsync``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByScoreAsync(System.String,System.Double,System.Double)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByScoreAsync(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScoresAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRevRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZScoreAsync(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZUnionStoreAsync(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRangeByLexAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SAddAsync``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SCardAsync(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SDiffAsync(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SDiffAsync``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SInterAsync(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SInterAsync``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SInterStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SIsMemberAsync(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SMembersAsync(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SMembersAsync``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SPopAsync(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SPopAsync``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMemberAsync(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMemberAsync``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMembersAsync(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRandMembersAsync``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SRemAsync``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SUnionAsync(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SUnionAsync``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LIndexAsync(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LIndexAsync``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LInsertBeforeAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LInsertAfterAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LLenAsync(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPopAsync(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPopAsync``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPushAsync``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LPushXAsync(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPopAsync(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPopAsync``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPopLPushAsync(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPopLPushAsync``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPushAsync``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RPushXAsync(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HExistsAsync(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGetAsync(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGetAsync``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGetAllAsync(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HGetAllAsync``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HIncrByFloatAsync(System.String,System.String,System.Double)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HKeysAsync(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HLenAsync(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HMGetAsync(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HMGetAsync``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HValsAsync(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HValsAsync``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.HScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.AppendAsync(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BitCountAsync(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BitOpAsync(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetBitAsync(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetSetAsync(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.GetSetAsync``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.IncrByAsync(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.IncrByFloatAsync(System.String,System.Double)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MGetAsync(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MGetAsync``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MSetAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MSetNxAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetAsync(System.String,System.Object,System.Int32,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetNxAsync(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.StrLenAsync(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.DumpAsync(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.KeysAsync(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.MoveAsync(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ObjectEncodingAsync(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ObjectRefCountAsync(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ObjectIdleTimeAsync(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PersistAsync(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.PTtlAsync(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RandomKeyAsync">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RenameAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RenameNxAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RestoreAsync(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SortAsync(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.TtlAsync(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.TypeAsync(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:GreenWhale.RedisCore.RedisHelper.ScanAsync``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.Nodes">
            <summary>
            按 key 规则分区存储
            </summary>
        </member>
        <member name="F:CSRedis.CSRedisClient.Serialize">
            <summary>
            自定义序列化方法
            </summary>
        </member>
        <member name="F:CSRedis.CSRedisClient.Deserialize">
            <summary>
            自定义反序列化方法
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.#ctor(System.String)">
            <summary>
            创建redis访问类
            </summary>
            <param name="connectionString">127.0.0.1[:6379],password=123456,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.#ctor(System.Func{System.String,System.String},System.String[])">
            <summary>
            创建redis访问分区类，通过 KeyRule 对 key 进行分区，连接对应的 connectionString
            </summary>
            <param name="NodeRule">按key分区规则，返回值格式：127.0.0.1:6379/13，默认方案(null)：取key哈希与节点数取模</param>
            <param name="connectionStrings">127.0.0.1[:6379],password=123456,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShell``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShell``1(System.String,System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShell``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.ValueTuple{System.String,``0}[]})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StartPipe(System.Action{GreenWhale.RedisCore.Model.CSRedisClientPipe{System.String}})">
            <summary>
            创建管道传输
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StartPipe">
            <summary>
            创建管道传输，打包提交如：RedisHelper.StartPipe().Set("a", "1").HSet("b", "f", "2").EndPipe();
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.NodesServerManager">
            <summary>
            在所有分区节点上，执行服务器命令
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgRewriteAof">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgSave">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKill(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKill(System.String,System.String,System.Nullable{CSRedis.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientList">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientGetName">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientPause(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientSetName(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Time">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigGet(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigRewrite">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigSet(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigResetStart">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DbSize">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DebugSegFault">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushAll">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushDb">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Info(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.LastSave">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Monitor(System.Action{System.Object,System.Object})">
            <summary>
            实时打印出 Redis 服务器接收到的命令，调试用
            </summary>
            <param name="onReceived">接收命令</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Role">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Save">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Shutdown(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOf(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOfNoOne">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogLen">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogReset">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Sync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgRewriteAofAsync">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgSaveAsync">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKillAsync(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKillAsync(System.String,System.String,System.Nullable{CSRedis.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientListAsync">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientGetNameAsync">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientPauseAsync(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientSetNameAsync(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.TimeAsync">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigGetAsync(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigRewriteAsync">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigSetAsync(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigResetStatAsync">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DbSizeAsync">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DebugSegFaultAsync">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushAllAsync">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushDbAsync">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.InfoAsync(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.LastSaveAsync">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.RoleAsync">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SaveAsync">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ShutdownAsync(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOfNoOneAsync">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogLenAsync">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogResetAsync">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SyncAsync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManager(System.String)">
            <summary>
            在指定分区节点上，执行服务器命令
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgRewriteAof">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgSave">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKill(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKill(System.String,System.String,System.Nullable{CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientList">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientGetName">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientPause(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientSetName(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Time">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigGet(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigRewrite">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigSet(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigResetState">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DbSize">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DebugSegFault">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushAll">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushDb">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Info(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(Server | Clients | Memory | Persistence | Stats | Replication | CPU | Keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.LastSave">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Monitor(System.Action{System.Object,System.Object})">
            <summary>
            实时打印出 Redis 服务器接收到的命令，调试用
            </summary>
            <param name="onReceived">接收命令</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Role">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Save">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Shutdown(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOf(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOfNoOne">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogLen">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogReset">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Sync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgRewriteAofAsync">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgSaveAsync">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillAsync(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillAsync(System.String,System.String,System.Nullable{CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientListAsync">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientGetNameAsync">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientPauseAsync(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientSetNameAsync(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.TimeAsync">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigGetAsync(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigRewriteAsync">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigSetAsync(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigResetStatAsync">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DbSizeAsync">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DebugSegFaultAsync">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushAllAsync">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushDbAsync">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.InfoAsync(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(Server | Clients | Memory | Persistence | Stats | Replication | CPU | Keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.LastSaveAsync">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.RoleAsync">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SaveAsync">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ShutdownAsync(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOfNoOneAsync">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogLenAsync">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogResetAsync">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SyncAsync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Auth(System.String,System.String)">
            <summary>
            验证密码是否正确
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Echo(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Ping(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Quit(System.String)">
            <summary>
            关闭当前连接
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Select(System.String,System.Int32)">
            <summary>
            切换到指定的数据库
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="index">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptExists(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptFlush">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptKill">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptLoad(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubChannels(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumPat">
            <summary>
            查看所有模糊订阅端的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumSub(System.String[])">
            <summary>
            查看所有订阅端的数量
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Subscribe(System.ValueTuple{System.String,System.Action{CSRedis.CSRedisClient.SubscribeMessageEventArgs}}[])">
            <summary>
            订阅，根据分区规则返回SubscribeObject，Subscribe(("chan1", msg => Console.WriteLine(msg.Body)), ("chan2", msg => Console.WriteLine(msg.Body)))
            </summary>
            <param name="channels">频道和接收器</param>
            <returns>返回可停止订阅的对象</returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.SubscribeMessageEventArgs.MessageId">
            <summary>
            频道的消息id
            </summary>
        </member>
        <member name="P:CSRedis.CSRedisClient.SubscribeMessageEventArgs.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:CSRedis.CSRedisClient.SubscribeMessageEventArgs.Body">
            <summary>
            接收到的内容
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.PSubscribe(System.String[],System.Action{CSRedis.CSRedisClient.PSubscribePMessageEventArgs})">
            <summary>
            模糊订阅，订阅所有分区节点(同条消息只处理一次），返回SubscribeObject，PSubscribe(new [] { "chan1*", "chan2*" }, msg => Console.WriteLine(msg.Body))
            </summary>
            <param name="channelPatterns">模糊频道</param>
            <param name="pmessage">接收器</param>
            <returns>返回可停止模糊订阅的对象</returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.PSubscribePMessageEventArgs.Pattern">
            <summary>
            匹配模式
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.SubscribeListBroadcast(System.String,System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端非争抢模式），都可以收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="clientId">订阅端标识，若重复则争抢，若唯一必然收到消息</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SubscribeList(System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZAdd(System.String,System.ValueTuple{System.Double,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCount(System.String,System.Double,System.Double)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZIncrBy(System.String,System.String,System.Double)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="memeber">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZInterStore(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScore(System.String,System.Double,System.Double)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZUnionStore(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPop``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPop``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitOp(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrByFloat(System.String,System.Double)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGet``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Set(System.String,System.Object,System.Int32,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Scan``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAdd(System.String,System.Double,System.Double,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAdd(System.String,System.ValueTuple{System.Double,System.Double,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoDist(System.String,System.Object,System.Object,GreenWhale.RedisCore.Model.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoHash(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoPos(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadius(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadius``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDist(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDist``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoord(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoord``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoord(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoord``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMember(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMember``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDist(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoord(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoord``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Lock(System.String,System.Int32)">
            <summary>
            开启分布式锁，若超时返回null
            </summary>
            <param name="name">锁名称</param>
            <param name="timeoutSeconds">超时（秒）</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShellAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShellAsync``1(System.String,System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShellAsync``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.Threading.Tasks.Task{System.ValueTuple{System.String,``0}[]}})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.AuthAsync(System.String,System.String)">
            <summary>
            验证密码是否正确
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EchoAsync(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PingAsync(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.QuitAsync(System.String)">
            <summary>
            关闭当前连接
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SelectAsync(System.String,System.Int32)">
            <summary>
            切换到指定的数据库
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="index">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EvalAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EvalSHAAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptExistsAsync(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptFlushAsync">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptKillAsync">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptLoadAsync(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PublishAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PublishNoneMessageIdAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubChannelsAsync(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumPatAsync">
            <summary>
            查看所有模糊订阅端的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumSubAsync(System.String[])">
            <summary>
            查看所有订阅端的数量
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfAddAsync``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfCountAsync(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfMergeAsync(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZAddAsync(System.String,System.ValueTuple{System.Double,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCardAsync(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCountAsync(System.String,System.Double,System.Double)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZIncrByAsync(System.String,System.String,System.Double)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="memeber">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZInterStoreAsync(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemAsync``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScoreAsync(System.String,System.Double,System.Double)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScoreAsync(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync``1(System.String,System.Double,System.Double,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 double.MaxValue 10</param>
            <param name="min">分数最小值 double.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScoreAsync(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZUnionStoreAsync(System.String,System.Double[],GreenWhale.RedisCore.Model.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLexAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SAddAsync``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SCardAsync(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffAsync(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffAsync``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterAsync(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterAsync``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SIsMemberAsync(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembersAsync(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembersAsync``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPopAsync(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPopAsync``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMemberAsync(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMemberAsync``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembersAsync(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembersAsync``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRemAsync``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionAsync(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionAsync``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndexAsync(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndexAsync``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertBeforeAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertAfterAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LLenAsync(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPopAsync(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPopAsync``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPushAsync``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPushXAsync(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopAsync(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopAsync``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPushAsync(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPushAsync``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPushAsync``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPushXAsync(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HExistsAsync(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAsync(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAsync``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAllAsync(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAllAsync``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrByFloatAsync(System.String,System.String,System.Double)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HKeysAsync(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HLenAsync(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGetAsync(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGetAsync``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HValsAsync(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HValsAsync``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.AppendAsync(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitCountAsync(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitOpAsync(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetBitAsync(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSetAsync(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSetAsync``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrByAsync(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrByFloatAsync(System.String,System.Double)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGetAsync(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGetAsync``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSetAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSetNxAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetAsync(System.String,System.Object,System.Int32,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetNxAsync(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StrLenAsync(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.DumpAsync(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.KeysAsync(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MoveAsync(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectEncodingAsync(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectRefCountAsync(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectIdleTimeAsync(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PersistAsync(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PTtlAsync(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RandomKeyAsync">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RenameAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RenameNxAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RestoreAsync(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SortAsync(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.TtlAsync(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.TypeAsync(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScanAsync``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAddAsync(System.String,System.Double,System.Double,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAddAsync(System.String,System.ValueTuple{System.Double,System.Double,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoDistAsync(System.String,System.Object,System.Object,GreenWhale.RedisCore.Model.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoHashAsync(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoPosAsync(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusAsync(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusAsync``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAsync(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAsync``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoordAsync(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoordAsync``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoordAsync(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoordAsync``1(System.String,System.Double,System.Double,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberAsync(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberAsync``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAsync(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAsync``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoordAsync(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoordAsync``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoordAsync(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoordAsync``1(System.String,System.Object,System.Double,GreenWhale.RedisCore.Model.GeoUnit,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientLock.Unlock">
            <summary>
            释放分布式锁
            </summary>
        </member>
        <member name="T:CSRedis.RedisClient">
            <summary>
            Represents a client connection to a Redis server instance
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.ConnectAsync">
            <summary>
            Open connection to redis server
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSRedis.RedisClient.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary redis command
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.AuthAsync(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EchoAsync(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PingAsync">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.QuitAsync">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SelectAsync(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DelAsync(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.DumpAsync(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExistsAsync(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAsync(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAtAsync(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.KeysAsync(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MoveAsync(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectEncodingAsync(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectAsync(GreenWhale.RedisCore.Model.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PersistAsync(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAsync(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAtAsync(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PTtlAsync(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RandomKeyAsync">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameAsync(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameNxAsync(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.TtlAsync(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.TypeAsync(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HDelAsync(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HExistsAsync(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAsync(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAllAsync``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAllAsync(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByFloatAsync(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HKeysAsync(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HLenAsync(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMGetAsync(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HValsAsync(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LIndexAsync(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LInsertAsync(System.String,GreenWhale.RedisCore.Model.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LLenAsync(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPopAsync(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushAsync(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushXAsync(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopAsync(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopLPushAsync(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushAsync(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushXAsync(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SCardAsync(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffAsync(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterAsync(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SIsMemberAsync(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMembersAsync(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPopAsync(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMemberAsync(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMembersAsync(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionAsync(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAddAsync``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCardAsync(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCountAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZIncrByAsync(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStoreAsync(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScoreAsync(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStoreAsync(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PublishAsync(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubChannelsAsync(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Glob-style channel pattern</param>
            <returns>Active channel names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumSubAsync(System.String[])">
            <summary>
            Return the number of subscribers (not counting clients subscribed to patterns) for the specified channels
            </summary>
            <param name="channels">Channels to query</param>
            <returns>Channel names and counts</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumPatAsync">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>The number of patterns all the clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalSHAAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptExistsAsync(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptFlushAsync">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptKillAsync">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptLoadAsync(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.RedisClient.AppendAsync(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitCountAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitOpAsync(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrAsync(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrByAsync(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetAsync(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetBitAsync(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetSetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrAsync(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByAsync(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByFloatAsync(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MGetAsync(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNxAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNxAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.TimeSpan,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetNxAsync(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StrLenAsync(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgRewriteAofAsync">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgSaveAsync">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientGetNameAsync">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKillAsync(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKillAsync(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">Client address</param>
            <param name="id">Client ID</param>
            <param name="type">Client type</param>
            <param name="skipMe">Set to true to skip calling client</param>
            <returns>The number of clients killed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientListAsync">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPauseAsync(System.Int32)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="milliseconds">Time in milliseconds to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPauseAsync(System.TimeSpan)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="timeout">Time to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientSetNameAsync(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigGetAsync(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigResetStatAsync">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigRewriteAsync">
            <summary>
            Rewrites the redis.conf file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigSetAsync(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DbSizeAsync">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DebugSegFaultAsync">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushAllAsync">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushDbAsync">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.InfoAsync(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LastSaveAsync">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RoleAsync">
            <summary>
            Provide information on the role of a Redis instance in the context of replication
            </summary>
            <returns>Role information</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SaveAsync">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ShutdownAsync(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfNoOneAsync">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogLenAsync">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogResetAsync">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SyncAsync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.RedisClient.TimeAsync">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MultiAsync">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DiscardAsync">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExecAsync">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.RedisClient.UnwatchAsync">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.WatchAsync(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfAddAsync(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfCountAsync(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfMergeAsync(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="E:CSRedis.RedisClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.TransactionQueued">
            <summary>
            Occurs when a transaction command is acknowledged by the server
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.MonitorReceived">
            <summary>
            Occurs when a monitor message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.Connected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Host">
            <summary>
            Get the Redis server hostname
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Port">
            <summary>
            Get the Redis server port
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.IsConnected">
            <summary>
            Get a value indicating whether the Redis client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Encoding">
            <summary>
            Get or set the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReconnectWait">
            <summary>
            Get or set the amount of time (milliseconds) to wait between reconnect attempts
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String)">
            <summary>
            Create a new RedisClient using default port and encoding
            </summary>
            <param name="host">Redis server hostname</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="endpoint">Redis server</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint,System.Boolean)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="endpoint">Redis server</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="endpoint">Redis server</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="endpoint">Redis server</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.StartPipe">
            <summary>
            Begin buffered pipeline mode (calls return immediately; use EndPipe() to execute batch)
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.StartPipeTransaction">
            <summary>
            Begin buffered pipeline mode within the context of a transaction (calls return immediately; use EndPipe() to excute batch)
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.EndPipe">
            <summary>
            Execute pipeline commands
            </summary>
            <returns>Array of batched command results</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StreamTo``1(System.IO.Stream,System.Func{GreenWhale.RedisCore.Model.IRedisClientSync,``0})">
            <summary>
            Stream a BULK reply from the server using default buffer size
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="destination">Destination stream</param>
            <param name="func">Client command to execute (BULK reply only)</param>
        </member>
        <member name="M:CSRedis.RedisClient.StreamTo``1(System.IO.Stream,System.Int32,System.Func{GreenWhale.RedisCore.Model.IRedisClientSync,``0})">
            <summary>
            Stream a BULK reply from the server
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="destination">Destination stream</param>
            <param name="bufferSize">Size of buffer used to write server response</param>
            <param name="func">Client command to execute (BULK reply only)</param>
        </member>
        <member name="M:CSRedis.RedisClient.Dispose">
            <summary>
            Dispose all resources used by the current RedisClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command
            </summary>
            <param name="command">Command name</param>
            <param name="args">Command arguments</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Select(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Object(GreenWhale.RedisCore.Model.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{GreenWhale.RedisCore.Model.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LInsert(System.String,GreenWhale.RedisCore.Model.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushX(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPop(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMembers(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCount(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCount(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZIncrBy(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStore(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScores(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScore(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStore(System.String,System.Double[],System.Nullable{GreenWhale.RedisCore.Model.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZLexCount(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubChannels(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Return only channels matching this pattern</param>
            <returns>Array of channel names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumSub(System.String[])">
            <summary>
            Return the number of subscribers for the specified channels
            </summary>
            <param name="channels">Channel names</param>
            <returns>Array of channel/count tuples</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumPat">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>Number of patterns all clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Eval(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalSHA(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitOp(GreenWhale.RedisCore.Model.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByFloat(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSet(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSet(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNx(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNx(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.TimeSpan,System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{GreenWhale.RedisCore.Model.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKill(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">client's ip:port</param>
            <param name="id">client's unique ID</param>
            <param name="type">client type (normal|slave|pubsub)</param>
            <param name="skipMe">do not kill the calling client</param>
            <returns>Nummber of clients killed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPause(System.Int32)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="milliseconds">Time to pause in milliseconds</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPause(System.TimeSpan)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="timeout">Time to pause</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigRewrite">
            <summary>
            Rewrite the redis.conf file the server was started with, applying the minimal changes needed to make it reflect current configuration
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DbSize">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Role">
            <summary>
            Get role information for the current Redis instance
            </summary>
            <returns>RedisMasterRole|RedisSlaveRole|RedisSentinelRole</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogLen">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogReset">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Time">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfAdd(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfCount(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfMerge(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.RedisSentinelClient">
            <summary>
            Represents a client connection to a Redis sentinel instance
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.ConnectAsync">
            <summary>
            Connect to the remote host
            </summary>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PingAsync">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MastersAsync">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MasterAsync(System.String)">
            <summary>
            Get information on the specified Redis master
            </summary>
            <param name="masterName">Name of the Redis master</param>
            <returns>Master information</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SentinelsAsync(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SlavesAsync(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.GetMasterAddrByNameAsync(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.IsMasterDownByAddrAsync(System.String,System.Int32,System.Int64,System.String)">
            <summary>
            Get master state information
            </summary>
            <param name="ip">Host IP</param>
            <param name="port">Host port</param>
            <param name="currentEpoch">Current epoch</param>
            <param name="runId">Run ID</param>
            <returns>Master state</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.ResetAsync(System.String)">
            <summary>
            Clear state in all masters with matching name
            </summary>
            <param name="pattern">Master name pattern</param>
            <returns>Number of masters that were reset</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.FailoverAsync(System.String)">
            <summary>
            Force a failover as if the master was not reachable, and without asking for agreement from other sentinels
            </summary>
            <param name="masterName">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MonitorAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Start monitoring a new master
            </summary>
            <param name="name">Master name</param>
            <param name="port">Master port</param>
            <param name="quorum">Quorum count</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.RemoveAsync(System.String)">
            <summary>
            Remove the specified master
            </summary>
            <param name="name">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SetAsync(System.String,System.String,System.String)">
            <summary>
            Change configuration parameters of a specific master
            </summary>
            <param name="masterName">Master name</param>
            <param name="option">Config option name</param>
            <param name="value">Config option value</param>
            <returns>Status code</returns>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.Reconnected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Host">
            <summary>
            Get the Redis sentinel hostname
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Port">
            <summary>
            Get the Redis sentinel port
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Connected">
            <summary>
            Get a value indicating whether the Redis sentinel client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Encoding">
            <summary>
            Get the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReconnectWait">
            <summary>
            Get or set the amount of time to wait between reconnect attempts
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String)">
            <summary>
            Create a new RedisSentinelClient using default port and encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RedisSentinelClient using default encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
            <param name="port">Redis sentinel port</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a new RedisSentinelClient using default encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
            <param name="port">Redis sentinel port</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Dispose">
            <summary>
            Release resoures used by the current RedisSentinelClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Ping">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Masters">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Master(System.String)">
            <summary>
            Get information on the specified Redis master
            </summary>
            <param name="masterName">Name of the Redis master</param>
            <returns>Master information</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Sentinels(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Slaves(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.GetMasterAddrByName(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Subscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Unsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to close</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PSubscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PUnsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to close</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.IsMasterDownByAddr(System.String,System.Int32,System.Int64,System.String)">
            <summary>
            Get master state information
            </summary>
            <param name="ip">Host IP</param>
            <param name="port">Host port</param>
            <param name="currentEpoch">Current epoch</param>
            <param name="runId">Run ID</param>
            <returns>Master state</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Reset(System.String)">
            <summary>
            Clear state in all masters with matching name
            </summary>
            <param name="pattern">Master name pattern</param>
            <returns>Number of masters that were reset</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Failover(System.String)">
            <summary>
            Force a failover as if the master was not reachable, and without asking for agreement from other sentinels
            </summary>
            <param name="masterName">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Monitor(System.String,System.Int32,System.Int32)">
            <summary>
            Start monitoring a new master
            </summary>
            <param name="name">Master name</param>
            <param name="port">Master port</param>
            <param name="quorum">Quorum count</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Remove(System.String)">
            <summary>
            Remove the specified master
            </summary>
            <param name="name">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Set(System.String,System.String,System.String)">
            <summary>
            Change configuration parameters of a specific master
            </summary>
            <param name="masterName">Master name</param>
            <param name="option">Config option name</param>
            <param name="value">Config option value</param>
            <returns>Status code</returns>
        </member>
    </members>
</doc>
